#include<p18f4580.h>
#define Bit_rate 100000
void I2C_Init(void);
char I2C_Start(char slave_write_address);
void I2C_Ready(void);
char I2C_Write(unsigned char data);
char I2C_Stop(void);
char I2C_Read(char flag);
//char I2C_read_byte(unsigned char address);
void I2C_Ack(void);
void I2C_Nack(void);
void delay(int a);
char high_byte(unsigned char bcd);
char low_byte(unsigned char bcd);
void lcd_cmd(unsigned char b);
void lcd_data(unsigned char b);
void Send2Lcd(const char Adr,rom const char *s);
unsigned char sec,min,hour,day,date,month,year;
char I2C_repeated_start(char slave_read_address);
char temperature[] = " 000  C";

unsigned char Temp;
unsigned short num;
const int TC74A0 = 0x90;


void check_device(unsigned short dev_address)
{
 I2C_Start(0x4D);
 if (I2C_Write(dev_address))
	{
  		Send2Lcd(0x80,"Device not found");
 	}
 else 
	{
		Send2Lcd(0x80,"TC74 device");
	}
  I2C_Stop();
}

unsigned short Read_Temp()
{
 unsigned short result;
 I2C_Start(0x4D);          // Issue start signal
 I2C_Write(TC74A0);       // Address + Write bit
 I2C_Write(0x00);         // Read Temp
 I2C_repeated_start(0X4E); // Issue start signal
 I2C_Write(TC74A0+1);     // Address + Read bit
 I2C_Ready();
 
}
 

void main()
{

	CMCON = 0x07;   // Disable comparators
    ADCON1 = 0x0F;  // Disable Analog functions
    TRISD=0X00;
    TRISC=0X00;
    lcd_cmd(0x01);
	lcd_cmd(0x38);
	lcd_cmd(0x0E);
	lcd_cmd(0x06);
	lcd_cmd(0x80);
  //lcd_cmd(0x01);
	lcd_cmd(0x0c);
    delay(40);
    //Send2Lcd(0x80,"Temperature:");
    //delay(40);
    //Send2Lcd(0xC0,"TC74:");
    //delay(40);
  //I2C_Init();	
	
	I2C_Init();
	delay(5);
	/*I2C_Ready();
	delay(5);
	I2C_Start(0x4D);
	delay(5);
	I2C_Write(0X00);
	delay(5);
	I2C_repeated_start(0X4E);*/
	
	do
	{
	   check_device(TC74A0);
	   num = Read_Temp();
		if (num > 127) 
	   {
	    temperature[0] = '-';
	    num = ~num +1;
	   }
   		else temperature[0] = '+';
	 
	    temperature[1] = num/100 + 48;
	    temperature[2] = (num/10)%10 + 48;
	    temperature[3] = num%10 + 48;
	    temperature[5] = 223;
	 
	   // eliminate 0s at beginning
	   if (temperature[1] == '0') 
		{
	      temperature[1] = ' ';
      	  if (temperature[2] == '0') temperature[2] = ' ';
   		}
 
   Send2Lcd(0x81,"temperature");
   delay(50);
  } while(1);
}



void I2C_Init(void)
{
    TRISCbits.RC3=1;		/* Set up I2C lines by setting as input */
    TRISCbits.RC4=1;
    SSPSTAT=0x80;		/* Slew rate disabled, other bits are cleared */
    SSPCON1=0x28;	
			
    SSPCON2=0;
    SSPADD=Bit_rate;	/* Clock 100 kHz */  
    PIE1bits.SSPIE=1;		/* Enable SSPIF interrupt */
    PIR1bits.SSPIF=0;
}

char I2C_Start(char slave_write_address)
{   
    SSPCON2bits.SEN=1;		/* Send start pulse */
    while(SSPCON2bits.SEN);	/* Wait for completion of start pulse */
    PIR1bits.SSPIF=0;
    if(!SSPSTATbits.S)		/* Check whether START detected last */
    return 0;			/* Return 0 to indicate start failed */   
    return (I2C_Write(slave_write_address));	/* Write slave device address
						with write to communicate */
}


 void I2C_Ready(void)
{
    while(PIR2bits.BCLIF);	/* Wait if bit collision interrupt flag is set*/

    while(SSPSTATbits.BF || (SSPSTATbits.R));
    PIR1bits.SSPIF=0;  		/* Clear SSPIF interrupt flag*/
}



char I2C_Write(unsigned char data)
{
      SSPBUF=data;	/* Write data to SSPBUF*/
      I2C_Ready();
      if (SSPCON2bits.ACKSTAT)	/* Check for acknowledge bit*/
        return 1;
      else
        return 2;
}

char I2C_Stop(void)
{
    I2C_Ready();
    SSPCON2bits.PEN=1;		/* Stop communication*/
    while(SSPCON2bits.PEN);		/* Wait for end of stop pulse*/
    PIR1bits.SSPIF = 0;
    if (!SSPSTATbits.P);/* Check whether STOP is detected last */
    return 0;		/* If not return 0 to indicate start failed*/
}


char I2C_Read(char flag)
{
        int buffer=0;
        SSPCON2bits.RCEN=1;			/* Enable receive */
	/* Wait for buffer full flag which when complete byte received */
        while(!SSPSTATbits.BF);
        buffer=SSPBUF;		/* Copy SSPBUF to buffer */
        SSPSTATbits.BF=0;//clear to avoid bufferfull condition
	/* Send acknowledgment or negative acknowledgment after read to 
	continue or stop reading */
        if(flag==0)
            I2C_Ack();
        else
            I2C_Nack();
        I2C_Ready();
        return(buffer);
}

char I2C_repeated_start(char slave_read_address)
{
	SSPCON2bits.RSEN=1;
	while(SSPCON2bits.RSEN);
	PIR1bits.SSPIF=0;
	if(!SSPSTATbits.S)
		return 0;
	return I2C_Write(slave_read_address);
//	if(SSPCON2bits.ACKSTAT)
//		return 1;
//	else
//		return 2;
}

 char high_byte(unsigned char bcd)
{
return((bcd>>4)+48);
}

 char low_byte(unsigned char bcd)
{
return((bcd&0X0F)+48);
}

void I2C_Ack(void)
{
    SSPCON2bits.ACKDT=0;		/* Acknowledge data 1:NACK,0:ACK */
    SSPCON2bits.ACKEN=1;		/* Enable ACK to send */
    while(SSPCON2bits.ACKEN);
 }


void I2C_Nack(void)
{
    SSPCON2bits.ACKDT=1;		/* Acknowledge data 1:NACK,0:ACK */
    SSPCON2bits.ACKEN=1;		/* Enable ACK to send */
    while(SSPCON2bits.ACKEN);
}


void delay(int a)
{
	int i,j;
	for(i=0;i<a;i++)
	for(j=0;j<100;j++);
}

void lcd_cmd(unsigned char b)
{
	PORTD=b;
	PORTCbits.RC6=0;
    PORTCbits.RC7=1;
	delay(40);
	PORTCbits.RC7=0;
}
void lcd_data(unsigned char b)
{
	PORTD=b;
	PORTCbits.RC6=1;
    PORTCbits.RC7=1;
	delay(40);
    PORTCbits.RC7=0;
}
void Send2Lcd(const char Adr,rom const char *s)
{
  lcd_cmd(Adr);
while(*s!='\0')
  {
   lcd_data(*s);
   s++;
  }
}
